{"version":3,"sources":["components/Controls/Control.js","components/Controls/Controls.js","components/Controls/Form.js","components/Graph/GraphBar.js","components/Graph/GraphBars.js","components/Graph/XAxis.js","components/Graph/YAxis.js","components/Graph/GraphArea.js","components/Graph/Graph.js","App.js","index.js"],"names":["Control","props","react_default","a","createElement","className","label","id","onChange","event","console","log","target","value","keyAndValueGetter","type","min","max","limit","step","Controls","updateValues","key","updateHandler","arr","Array","controlsValues","map","components_Controls_Control","Form","onSubmit","preventDefault","makeGraph","components_Controls_Controls","controlsData","GraphBar","heightStyle","height","maxHeight","interestHeight","heightInterest","depositsHeight","heightDeposits","style","concat","GraphBars","netGains","graphData","yearlyGains","Object","toConsumableArray","interestData","arrYearlyGains","item","index","width","barWidth","Math","round","components_Graph_GraphBar","monthlyDeposit","year","barData","Xaxis","i","columns","push","YAxis","yAxisMax","n","ceil","pow","unshift","GraphArea","numberOfColumns","length","currentYear","Date","getFullYear","content","components_Graph_YAxis","ticks","components_Graph_GraphBars","Graph_XAxis","Graph","components_Graph_GraphArea","App","_useState","useState","_useState2","slicedToArray","input","setInput","_useState3","Net Gains","Compound Interest","Yearly Gains","Yearly Interest","_useState4","graphValues","setgraphValues","components_Controls_Form","deposits","parseInt","interest","years","inflation","yearlyInterest","compoundInterest","floor","copyState","components_Graph_Graph","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9d3f7340.chunk.js","sourcesContent":["import \"./Control.css\";\r\nimport React from \"react\";\r\n//Nothing to see here\r\nconst Control = (props) => {\r\n  const inputHandler = (event) => {\r\n    console.log(event.target.id, event.target.value);\r\n    props.keyAndValueGetter(event.target.id, event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"control\">\r\n      <p>{props.label}</p>\r\n      <input\r\n        id={props.label}        \r\n        onChange={inputHandler}\r\n        value={props.value}\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max={props.limit}\r\n        step=\"1\"\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Control;\r\n","import Control from \"./Control\";\r\nimport \"./Controls.css\";\r\nimport React from \"react\";\r\n\r\nconst Controls = (props) => {\r\n  const updateValues = (key, value) => {\r\n    props.updateHandler(key, value);\r\n  };\r\n  let limit;\r\n  let arr = new Array(\r\n    props.controlsValues.map((value) => {\r\n      if (value.key === \"Monthly Deposits\") {\r\n        limit = 100000;\r\n      } else {\r\n        limit = 20;\r\n      }\r\n      return (\r\n        <Control\r\n          keyAndValueGetter={updateValues}\r\n          key={value.key}\r\n          label={value.key}\r\n          value={value.value}\r\n          limit={limit}\r\n        />\r\n      );\r\n    })\r\n  );\r\n  return <div className=\"controls\">{arr}</div>;\r\n};\r\n\r\nexport default Controls;\r\n","import Controls from './Controls';\r\nimport './Form.css';\r\nimport React from 'react';\r\nconst Form = props =>{\r\n    const keyAndValueExtractor=(key, value)=>{\r\n        props.updateHandler(key, value)\r\n    }\r\n    const submitHandler = (event)=>{\r\n        event.preventDefault();\r\n        props.makeGraph()\r\n    }\r\n    return(\r\n        <form className=\"control_form\" onSubmit={submitHandler}>\r\n            <Controls updateHandler={keyAndValueExtractor} controlsValues={props.controlsData}/>\r\n            <button>Build Graph</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import \"./GraphBar.css\";\r\nimport React from \"react\";\r\n\r\n\r\nconst GraphBar = (props) => {\r\n  const heightStyle = (props.height / props.maxHeight) * 90 + \"%\";\r\n  const interestHeight = (props.heightInterest / props.height) * 100 + \"%\";\r\n  const depositsHeight = (props.heightDeposits / props.height) * 100 + \"%\";\r\n\r\n  //compound ineterest   {props.heightInterest}\r\n  //total deposits {props.heightDeposits}\r\n  return (\r\n    <div style={{ height: `${heightStyle}`}} className=\"graph-bar\">\r\n        \r\n        <div\r\n          className=\"graph-bar_interest\"\r\n          style={{ height: `${interestHeight}` }}\r\n        ></div>\r\n        <div\r\n          className=\"graph-bar_aportations\"\r\n          style={{ height: `${depositsHeight}` }}\r\n        ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphBar;\r\n","import GraphBar from \"./GraphBar\";\r\nimport \"./GraphBars.css\";\r\nimport React from \"react\";\r\n\r\nconst GraphBars = (props) => {\r\n  const netGains = props.graphData[\"Net Gains\"];\r\n  const yearlyGains = [...props.graphData[\"Yearly Gains\"]];\r\n  const interestData = [...props.graphData[\"Yearly Interest\"]];\r\n\r\n  const arrYearlyGains = props.graphData[\"Yearly Gains\"].map((item, index) => {\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"graph-bars_container\"\r\n       \r\n        style={{ width: `${props.barWidth}` }}\r\n      >\r\n        <div className=\"graph-bars_bar_label\">\r\n          <p>ROI: ${Math.round(yearlyGains[index] / 1000)}K</p>\r\n          <p>Interest: ${Math.round(interestData[index] / 1000)}K</p>\r\n        </div>\r\n        <GraphBar\r\n          barWidth={props.barWidth}\r\n          maxHeight={netGains}\r\n          height={item}\r\n          heightInterest={interestData[index]}\r\n          heightDeposits={(index + 1) * 12 * props.monthlyDeposit}\r\n          year={props.year + index + 1}\r\n          barData={props.graphData}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n  return <div  \r\n  className=\"graph-bars\">{arrYearlyGains}</div>;\r\n};\r\n\r\nexport default GraphBars;\r\n","import './XAxis.css';\r\nimport React from \"react\";\r\n\r\nconst Xaxis = (props) => {\r\n  let arr = [];\r\n  for (let i = 0; i < props.columns; i++) {\r\n    arr.push(\r\n      <div key={props.year+i} style={{ width: `${props.barWidth}` }}>\r\n        {props.year + i + 1}\r\n      </div>\r\n    );\r\n  }\r\n  return <div className={\"xaxis\"}>{arr}</div>;\r\n};\r\nexport default Xaxis;\r\n","import \"./YAxis.css\";\r\nimport React from \"react\";\r\n\r\nconst YAxis = (props) => {\r\n  let arr = [];\r\n  let yAxisMax = props.limit;\r\n  let n = 0;\r\n  while (yAxisMax >= 10) {\r\n    yAxisMax /= 10;\r\n    Math.ceil(yAxisMax);\r\n    n++;\r\n  }\r\n  yAxisMax *= Math.pow(10, n);\r\n  let ticks = 90 / 8 + \"%\";\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    arr.unshift(\r\n      <div key={i} style={{ height: `${ticks}` }} className=\"yaxis_tick\">\r\n        {Math.ceil(((yAxisMax / 8)*(i + 1)/1000))}<div className=\"yaxis_line\"></div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"yaxis\">\r\n      <div className=\"yaxis_ticks\">{arr}</div>\r\n      <div className=\"yaxis_label\">$10<sup>3</sup>/Yrs</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YAxis;\r\n","import GraphBars from \"./GraphBars\";\r\nimport \"./GraphArea.css\";\r\nimport Xaxis from \"./XAxis\";\r\nimport YAxis from \"./YAxis\";\r\nimport React from \"react\";\r\n\r\nconst GraphArea = (props) => {\r\n  const numberOfColumns = props.graphData[\"Yearly Gains\"].length;\r\n  const barWidth = (1 / props.graphData[\"Yearly Gains\"].length) * 90 + \"%\";\r\n  const date = new Date();\r\n  const currentYear = date.getFullYear();\r\n\r\n  let content = (\r\n    <div className={\"graph-area graph-area_no_Data\"}>\r\n      <h1>The graph will appear here</h1>\r\n      <h4>\r\n        Select a monthly deposit, interest rate, years and inflation to build\r\n        the graph\r\n      </h4>\r\n    </div>\r\n  );\r\n\r\n  if (numberOfColumns !== 0) {\r\n    content = (\r\n      <div className=\"graph-area\">\r\n        <YAxis\r\n          className=\"graph-area_yaxis\"\r\n          ticks={numberOfColumns}\r\n          limit={props.graphData[\"Net Gains\"]}\r\n        />\r\n        <div className=\"graph-area_xaxis_bars\">\r\n          <div className=\"graph-area_bars\">\r\n            <GraphBars\r\n              graphData={props.graphData}\r\n              barWidth={barWidth}\r\n              year={currentYear}\r\n              monthlyDeposit={props.monthlyDeposit}\r\n            />\r\n          </div>\r\n          <div className=\"graph-area_xaxis\">\r\n            <Xaxis\r\n              barWidth={barWidth}\r\n              year={currentYear}\r\n              columns={numberOfColumns}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n\r\nexport default GraphArea;\r\n","import GraphArea from \"./GraphArea\";\r\nimport \"./Graph.css\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Graph = (props) => {\r\n  let content = <h1>The graph will appear here</h1>;\r\n\r\n  if (props.graphData[\"Net gains\"] === 0) {\r\n    console.log(\"zero\");\r\n  } else {\r\n    content = (\r\n      <GraphArea\r\n        graphData={props.graphData}\r\n        monthlyDeposit={props.monthlyDeposit}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      <h3 style={{ height: \"10%\" }}>Compound interest</h3>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Controls/Form\";\r\nimport Graph from \"./components/Graph/Graph\";\r\nimport React from \"react\";\r\n\r\nfunction App() {\r\n  const controlsValues = [\r\n    { key: \"Monthly Deposits\", value: +10000 },\r\n    {\r\n      key: \"Interest rate\",\r\n      value: +6,\r\n    },\r\n    {\r\n      key: \"Years\",\r\n      value: +5,\r\n    },\r\n    {\r\n      key: \"Inflation\",\r\n      value: +3,\r\n    },\r\n  ];\r\n  const graphData = {\r\n    \"Net Gains\": +0,\r\n    \"Compound Interest\": +0,\r\n    \"Yearly Gains\": [],\r\n    \"Yearly Interest\": [],\r\n  };\r\n\r\n  const [input, setInput] = useState(controlsValues);\r\n  const [graphValues, setgraphValues] = useState(graphData);\r\n\r\n  const updateInput = (key, value) => {\r\n    const copyState = [...input];\r\n    copyState.map((input) => {\r\n      if (input[\"key\"] === key) {\r\n        input[\"value\"] = value;\r\n      }\r\n      return input;\r\n    });\r\n    setInput(copyState);\r\n  };\r\n\r\n  const graphBuilder = () => {\r\n    let deposits = parseInt(input[0][\"value\"]);\r\n    let interest = parseInt(input[1][\"value\"]);\r\n    let years = parseInt(input[2][\"value\"]);\r\n    let inflation = parseInt(input[3][\"value\"]);\r\n\r\n\r\n    let netGains = 0;\r\n    let yearlyGains = [];\r\n    let yearlyInterest = [];\r\n    for (let i = 1; i <= years * 12; i++) {\r\n      netGains =\r\n        (deposits + netGains) *\r\n        (1 + ((interest - inflation) * 30) / (365 * 100));\r\n      if (i % 12 === 0) {\r\n        yearlyGains = [...yearlyGains, netGains];\r\n        yearlyInterest = [...yearlyInterest, netGains - deposits * i];\r\n      }\r\n    }\r\n    let compoundInterest = netGains - deposits * years * 12;\r\n\r\n    setgraphValues({\r\n      \"Net Gains\": Math.floor(netGains),\r\n      \"Compound Interest\": Math.floor(compoundInterest),\r\n      \"Yearly Gains\": yearlyGains,\r\n      \"Yearly Interest\": yearlyInterest,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Form\r\n        makeGraph={graphBuilder}\r\n        updateHandler={updateInput}\r\n        controlsData={input}\r\n      />\r\n      <Graph\r\n        monthlyDeposit={input[0][\"value\"]}\r\n        graphData={graphValues}\r\n        input={input}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}